// <auto-generated />
using System;
using Boolqa.Rapid.App.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Boolqa.Rapid.App.Data.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20230413003838_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "object_link_type", new[] { "linked" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "object_type", new[] { "object", "category", "tag", "custom" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "setting_type", new[] { "system", "user", "plugin" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "shared_mode", new[] { "denied", "read", "write", "share" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "variable_type", new[] { "stringboolintegerfloattimedateTimeenum" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.CoreObject", b =>
                {
                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("object_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ObjectId");

                    b.HasIndex("UserId");

                    b.ToTable("object", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.EntityHistory", b =>
                {
                    b.Property<Guid>("EntityHistoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_history_id");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("field_name");

                    b.Property<string>("NewValue")
                        .HasColumnType("text")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValue")
                        .HasColumnType("text")
                        .HasColumnName("old_value");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("EntityHistoryId")
                        .HasName("entity_history_pkey");

                    b.ToTable("entity_history", (string)null);
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.Plugin", b =>
                {
                    b.Property<Guid>("PluginId")
                        .HasColumnType("uuid")
                        .HasColumnName("plugin_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PluginKey")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("plugin_key");

                    b.Property<string>("Version")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("version");

                    b.HasKey("PluginId")
                        .HasName("plugin_pkey");

                    b.ToTable("plugin", (string)null);
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.Tenant", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.HasKey("TenantId")
                        .HasName("tenant_pkey");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("tenant", (string)null);

                    b.HasData(
                        new
                        {
                            TenantId = new Guid("63d26df9-0e3f-4e00-8187-1a5f7b000002"),
                            Name = "Main",
                            OwnerUserId = new Guid("63d26df9-0e3f-4e00-8187-1a5f7b000001")
                        });
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("UserId")
                        .HasName("user_pkey");

                    b.HasIndex("TenantId");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("63d26df9-0e3f-4e00-8187-1a5f7b000001"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.GroupObject", b =>
                {
                    b.HasBaseType("Boolqa.Rapid.Server.Data.CoreObject");

                    b.ToTable("group_object", (string)null);
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.LinkObject", b =>
                {
                    b.HasBaseType("Boolqa.Rapid.Server.Data.CoreObject");

                    b.Property<int>("LinkType")
                        .HasColumnType("integer")
                        .HasColumnName("link_type");

                    b.Property<Guid>("ObjectFromId")
                        .HasColumnType("uuid")
                        .HasColumnName("object_from_id");

                    b.Property<Guid>("ObjectToId")
                        .HasColumnType("uuid")
                        .HasColumnName("object_to_id");

                    b.HasIndex(new[] { "ObjectFromId" }, "link_object_object_from_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "ObjectToId" }, "link_object_object_to_id_key")
                        .IsUnique();

                    b.ToTable("link_object", (string)null);
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.SettingObject", b =>
                {
                    b.HasBaseType("Boolqa.Rapid.Server.Data.CoreObject");

                    b.Property<string>("Key")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("key");

                    b.Property<int>("SettingType")
                        .HasColumnType("integer")
                        .HasColumnName("setting_type");

                    b.Property<string>("Value")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("value");

                    b.Property<int>("VariableType")
                        .HasColumnType("integer")
                        .HasColumnName("variable_type");

                    b.HasIndex(new[] { "Key" }, "setting_object_key_key")
                        .IsUnique();

                    b.ToTable("setting_object", (string)null);
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.SharedObject", b =>
                {
                    b.HasBaseType("Boolqa.Rapid.Server.Data.CoreObject");

                    b.Property<Guid?>("AccessUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("access_user_id");

                    b.Property<int>("Mode")
                        .HasColumnType("integer")
                        .HasColumnName("mode");

                    b.Property<Guid?>("TargetObjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("target_object_id");

                    b.HasIndex("AccessUserId");

                    b.HasIndex("TargetObjectId");

                    b.ToTable("shared_object", (string)null);

                    b.HasData(
                        new
                        {
                            ObjectId = new Guid("63d26df9-0e3f-4e00-8187-1a5f7b000003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Test share",
                            Type = "shared",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("63d26df9-0e3f-4e00-8187-1a5f7b000001"),
                            Mode = 3
                        });
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.CoreObject", b =>
                {
                    b.HasOne("Boolqa.Rapid.Server.Data.User", "User")
                        .WithMany("Objects")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("object_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.Tenant", b =>
                {
                    b.HasOne("Boolqa.Rapid.Server.Data.User", "OwnerUser")
                        .WithMany("Tenants")
                        .HasForeignKey("OwnerUserId")
                        .IsRequired()
                        .HasConstraintName("tenant_owner_user_id_fkey");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.User", b =>
                {
                    b.HasOne("Boolqa.Rapid.Server.Data.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("user_tenant_id_fkey");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.GroupObject", b =>
                {
                    b.HasOne("Boolqa.Rapid.Server.Data.CoreObject", null)
                        .WithOne()
                        .HasForeignKey("Boolqa.Rapid.Server.Data.GroupObject", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.LinkObject", b =>
                {
                    b.HasOne("Boolqa.Rapid.Server.Data.CoreObject", "ObjectFrom")
                        .WithMany("LinkObjectObjectFrom")
                        .HasForeignKey("ObjectFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("link_object_object_from_id_fkey");

                    b.HasOne("Boolqa.Rapid.Server.Data.CoreObject", null)
                        .WithOne()
                        .HasForeignKey("Boolqa.Rapid.Server.Data.LinkObject", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boolqa.Rapid.Server.Data.CoreObject", "ObjectTo")
                        .WithMany("LinkObjectObjectTo")
                        .HasForeignKey("ObjectToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("link_object_object_to_id_fkey");

                    b.Navigation("ObjectFrom");

                    b.Navigation("ObjectTo");
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.SettingObject", b =>
                {
                    b.HasOne("Boolqa.Rapid.Server.Data.CoreObject", null)
                        .WithOne()
                        .HasForeignKey("Boolqa.Rapid.Server.Data.SettingObject", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.SharedObject", b =>
                {
                    b.HasOne("Boolqa.Rapid.Server.Data.User", "AccessUser")
                        .WithMany("SharedObjects")
                        .HasForeignKey("AccessUserId")
                        .HasConstraintName("shared_object_access_user_id_fkey");

                    b.HasOne("Boolqa.Rapid.Server.Data.CoreObject", null)
                        .WithOne()
                        .HasForeignKey("Boolqa.Rapid.Server.Data.SharedObject", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boolqa.Rapid.Server.Data.CoreObject", "TargetObject")
                        .WithMany("SharedObjectTargetObjects")
                        .HasForeignKey("TargetObjectId")
                        .HasConstraintName("shared_object_target_object_id_fkey");

                    b.Navigation("AccessUser");

                    b.Navigation("TargetObject");
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.CoreObject", b =>
                {
                    b.Navigation("LinkObjectObjectFrom");

                    b.Navigation("LinkObjectObjectTo");

                    b.Navigation("SharedObjectTargetObjects");
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.Tenant", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Boolqa.Rapid.Server.Data.User", b =>
                {
                    b.Navigation("Objects");

                    b.Navigation("SharedObjects");

                    b.Navigation("Tenants");
                });
#pragma warning restore 612, 618
        }
    }
}
